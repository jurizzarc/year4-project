{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { setToLS, getFromLS } from '../utils/storage';\nimport _ from 'lodash'; // Returns the selected theme from localStorage and a boolean indicating if the theme is loaded correctly\n\nexport const useTheme = () => {\n  _s();\n\n  const themes = getFromLS('all-themes');\n  const [theme, setTheme] = useState(themes.data.light);\n  const [themeLoaded, setThemeLoaded] = useState(false); // Applies the theme \n\n  const setMode = mode => {\n    setToLS('theme', mode);\n    setTheme(mode);\n  };\n\n  useEffect(() => {\n    const localTheme = getFromLS('theme');\n    localTheme ? setTheme(localTheme) : setTheme(themes.data.light);\n    setThemeLoaded(true);\n  }, []);\n  return {\n    theme,\n    themeLoaded,\n    setMode\n  };\n};\n\n_s(useTheme, \"ApFPfNNtePxoOwJLQAVXHHPzK2s=\");","map":{"version":3,"sources":["/Users/jurizzarechel/Desktop/y4project/y4project-frontend/src/theme/useTheme.js"],"names":["useEffect","useState","setToLS","getFromLS","_","useTheme","themes","theme","setTheme","data","light","themeLoaded","setThemeLoaded","setMode","mode","localTheme"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,kBAAnC;AACA,OAAOC,CAAP,MAAc,QAAd,C,CACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAMC,MAAM,GAAGH,SAAS,CAAC,YAAD,CAAxB;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACK,MAAM,CAACG,IAAP,CAAYC,KAAb,CAAlC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C,CAH0B,CAI1B;;AACA,QAAMY,OAAO,GAAGC,IAAI,IAAI;AACpBZ,IAAAA,OAAO,CAAC,OAAD,EAAUY,IAAV,CAAP;AACAN,IAAAA,QAAQ,CAACM,IAAD,CAAR;AACH,GAHD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,UAAU,GAAGZ,SAAS,CAAC,OAAD,CAA5B;AACAY,IAAAA,UAAU,GAAGP,QAAQ,CAACO,UAAD,CAAX,GAA0BP,QAAQ,CAACF,MAAM,CAACG,IAAP,CAAYC,KAAb,CAA5C;AACAE,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAEL,IAAAA,KAAF;AAASI,IAAAA,WAAT;AAAsBE,IAAAA;AAAtB,GAAP;AACH,CAhBM;;GAAMR,Q","sourcesContent":["import { useEffect, useState } from 'react';\nimport { setToLS, getFromLS } from '../utils/storage';\nimport _ from 'lodash';\n// Returns the selected theme from localStorage and a boolean indicating if the theme is loaded correctly\nexport const useTheme = () => {\n    const themes = getFromLS('all-themes');\n    const [theme, setTheme] = useState(themes.data.light);\n    const [themeLoaded, setThemeLoaded] = useState(false);\n    // Applies the theme \n    const setMode = mode => {\n        setToLS('theme', mode);\n        setTheme(mode);\n    };\n    useEffect(() => {\n        const localTheme = getFromLS('theme');\n        localTheme ? setTheme(localTheme) : setTheme(themes.data.light);\n        setThemeLoaded(true);\n    }, []);\n\n    return { theme, themeLoaded, setMode };\n}"]},"metadata":{},"sourceType":"module"}